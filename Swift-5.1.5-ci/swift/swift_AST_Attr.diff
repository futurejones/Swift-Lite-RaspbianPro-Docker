From 087b9893da12253cbb296dea0e473b807fc016aa Mon Sep 17 00:00:00 2001
From: Adam Thayer <user@biticus.net>
Date: Sun, 14 Oct 2018 13:00:52 -0700
Subject: [PATCH] Force AttributeBase Alignment to 8-byte

On 32-bit ARM, if an AvailableAttr was getting 4-byte aligned, it would trigger a LLVM assert that the PointerIntPair wasn't aligned enough. Forcing 8-byte alignment for AttributeBase addresses the problem. However, the assert is mentioning it wants 2 bits, so I'm not 100% sure where the extra bit is coming from.

This is a little messy, since if you are using the custom new operator on a child class of AttributeBase, you get the implementation on AttributeBase, which forces alignment to be that of AttributeBase. This is problematic if any child class requires more strict alignment than AttributeBase in general.
---
 include/swift/AST/Attr.h           | 2 +-
 include/swift/AST/TypeAlignments.h | 4 ++++
 2 files changed, 5 insertions(+), 1 deletion(-)

diff --git a/include/swift/AST/Attr.h b/include/swift/AST/Attr.h
index 417f9249d8d..e1fa02fc862 100644
--- a/include/swift/AST/Attr.h
+++ b/include/swift/AST/Attr.h
@@ -135,7 +135,7 @@ class TypeAttributes {
   static const char *getAttrName(TypeAttrKind kind);
 };
 
-class AttributeBase {
+class alignas(1 << AttrAlignInBits) AttributeBase {
 public:
   /// The location of the '@'.
   const SourceLoc AtLoc;
diff --git a/include/swift/AST/TypeAlignments.h b/include/swift/AST/TypeAlignments.h
index f360a10befd..8ceb776d261 100644
--- a/include/swift/AST/TypeAlignments.h
+++ b/include/swift/AST/TypeAlignments.h
@@ -30,6 +30,7 @@ namespace swift {
   class ArchetypeType;
   class AssociatedTypeDecl;
   class ASTContext;
+  class AttributeBase;
   class BraceStmt;
   class Decl;
   class DeclContext;
@@ -51,6 +52,7 @@ namespace swift {
   class ValueDecl;
 
   /// We frequently use three tag bits on all of these types.
+  constexpr size_t AttrAlignInBits = 3;
   constexpr size_t DeclAlignInBits = 3;
   constexpr size_t DeclContextAlignInBits = 3;
   constexpr size_t ExprAlignInBits = 3;
@@ -114,6 +116,8 @@ LLVM_DECLARE_TYPE_ALIGNMENT(swift::Pattern,
 LLVM_DECLARE_TYPE_ALIGNMENT(swift::SILFunction,
                             swift::SILFunctionAlignInBits)
 
+LLVM_DECLARE_TYPE_ALIGNMENT(swift::AttributeBase, swift::AttrAlignInBits)
+
 static_assert(alignof(void*) >= 2, "pointer alignment is too small");
 
 #endif
